#include <ESP8266WiFi.h>
#include <WebSocketsClient.h>
#include <ArduinoJson.h>

// Wi-Fi credentials
const char* ssid = "WifiName";
const char* password = "Password";

// WebSocket server
const char* host = "Host";
const uint16_t port = 8080;
const char* path = "/";

// Motor control pins
#define IN1 D2  
#define IN2 D5
#define IN3 D6  
#define IN4 D7  
// Motor control pins
#define INL1 D3  
#define INL2 D4 
#define INL3 D8  
#define INL4 3  
#define PWM_PIN D1



WebSocketsClient webSocket;

void setup() {
  Serial.begin(115200);

  // Set pin modes
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(INL1, OUTPUT);
  pinMode(INL2, OUTPUT);
  pinMode(INL3, OUTPUT);
  pinMode(INL4, OUTPUT);
  pinMode(PWM_PIN, OUTPUT);


  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  Serial.print( Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWi-Fi connected");
  // digitalWrite(GREEN_LED, HIGH);

  WiFi.setSleepMode(WIFI_NONE_SLEEP);

  // Connect to WebSocket
  webSocket.begin(host, port, path);
  webSocket.onEvent(webSocketEvent);
}

// WebSocket event handler
void webSocketEvent(WStype_t type, uint8_t* payload, size_t length) {
  if (type == WStype_TEXT && length > 0) {
    Serial.print("Message: ");
    Serial.write(payload, length);
    Serial.println();

    StaticJsonDocument<256> doc;
    DeserializationError error = deserializeJson(doc, payload);

    if (error) {
      Serial.print("JSON parse error: ");
      Serial.println(error.c_str());
      return;
    }

    const char* dirn = doc["dirn"];
    int speed = doc["speed"];

    if (dirn != nullptr && strlen(dirn) > 0) {
      drive(dirn[0], speed);
    }
  }
}

void loop() {
  webSocket.loop();
}

void stopMotors() {
  digitalWrite(IN1, LOW); digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW); digitalWrite(IN4, LOW);
  digitalWrite(INL1, HIGH); digitalWrite(INL2, HIGH);
  digitalWrite(INL3, LOW); digitalWrite(INL4, LOW);
  analogWrite(PWM_PIN, 0);
}

void moveForward() {
  digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW);
  digitalWrite(INL1, HIGH); digitalWrite(INL2, LOW);
  digitalWrite(INL3, HIGH); digitalWrite(INL4, LOW);
}

void moveBackward() {
  digitalWrite(IN1, LOW); digitalWrite(IN2, HIGH);
  digitalWrite(IN3, LOW); digitalWrite(IN4, HIGH);
  digitalWrite(INL1, LOW); digitalWrite(INL2, HIGH);
  digitalWrite(INL3, LOW);digitalWrite(INL4, HIGH);
}

void turnLeft() {
  digitalWrite(IN1, LOW); digitalWrite(IN2, HIGH);
  digitalWrite(IN3, LOW); digitalWrite(IN4, HIGH);
  digitalWrite(INL1, HIGH); digitalWrite(INL2, LOW);
  digitalWrite(INL3, HIGH); digitalWrite(INL4, LOW);
}

void turnRight() {
  digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW);
  digitalWrite(INL1, LOW); digitalWrite(INL2, HIGH);
  digitalWrite(INL3, LOW); digitalWrite(INL4, HIGH);
}
void forwardRight() {
  digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW);
  digitalWrite(INL1, HIGH); digitalWrite(INL2, LOW);
  digitalWrite(INL3, LOW);digitalWrite(INL4, HIGH);
}

void forwardLeft() {
  digitalWrite(IN1, LOW); digitalWrite(IN2, HIGH);
  digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW);
  digitalWrite(INL1, LOW); digitalWrite(INL2, HIGH);
  digitalWrite(INL3, HIGH); digitalWrite(INL4, LOW);
}

void backwardRight() {
  digitalWrite(IN1, LOW); digitalWrite(IN2, HIGH);
  digitalWrite(IN3, LOW); digitalWrite(IN4, HIGH);
  digitalWrite(INL1, LOW); digitalWrite(INL2, HIGH);
  digitalWrite(INL3, HIGH); digitalWrite(INL4, LOW);
}

void backwardLeft() {
  digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW); digitalWrite(IN4, HIGH);
  digitalWrite(INL1, LOW); digitalWrite(INL2, HIGH);
  digitalWrite(INL3, LOW);digitalWrite(INL4, HIGH);
}


// Unified control based on direction char
void drive(char dir, int spd) {
  spd = constrain(spd, 0, 100);
  int pwmValue = map(spd, 0, 100, 0, 1023);
  analogWrite(PWM_PIN, pwmValue);

  switch (dir) {
    case 'w': moveForward(); break;
    case 's': moveBackward(); break;
    case 'a': turnLeft(); break;
    case 'd': turnRight(); break;
    case 'm': forwardRight(); break;
    case 'n': forwardLeft(); break;
    case 'o': backwardRight(); break;
    case 'p': backwardLeft(); break;
    default: stopMotors(); break;
  }

  Serial.printf("Direction: %c | PWM: %d\n", dir, pwmValue);
}
